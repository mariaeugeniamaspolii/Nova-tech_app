import { 
    PRODUCTS_URL,
    STORE_URL,
    USERS_URL,
    status} from "./globals.js";

import { 
    apiToJson,
    getLocalStorage, 
    setLocalStorage, 
    showToastSuccess, 
    showToastError, 
    } from "./utils.js";

// document.querySelector(".home-button").addEventListener("click", navTabHome);
// document.querySelector(".search-button").addEventListener("click", navTabSearch);
// document.querySelector(".cart-button").addEventListener("click", navTabcart);
// document.querySelector(".fav-button").addEventListener("click", navTabFav);
// document.querySelector(".user-login-button").addEventListener("click", navPageUserLogin);

export async function loadTabHome(){
    getProductList(6, ".product-list")
    console.log("LOADED loadTabHome")

    if (status.userLogged !== undefined) {
        console.log("user logged", status.userLogged)
        printUserInfo(status.userLogged);
    } else {
        console.log("user NOT LOGGED")
        getUserInfo();
    }
}

function getProductList(size,insertAt){
    setTimeout(()=>
    {
        fetch(PRODUCTS_URL + "/sites/MLU/search/?"+STORE_URL)
        .then(apiToJson)
        .then((apiJson)=>{
            printProducts(apiJson.results, size, insertAt)
        })
    }, 1000);
}

function printProducts(products, size, insertAt){
    // console.log("products", products)
    let html= "";
    for(let product of products){
        // console.log('currency: ', product.currency_id);
        // console.log('ID PRODUCTTO: ', product.id);
        
        let currency ="$";
        currency = product.currency_id === "USD" ? "U$S" : currency;

        html += 
        `<ion-col size="${size}">
            <card-product
                name="${product.title}"
                id="${product.id}"
                currency="${currency}"
                price="${product.price}"
                image="${product.thumbnail}"
            ></card-product>
        </ion-col>`;
    }

    document.querySelector(insertAt).innerHTML = 
    `<ion-grid>
        <ion-row>
            ${html}
        </ion-row>
    </ion-grid>`

}

export function loadTabDetail(id){
    getProductDetail(id)
}

function getProductDetail(id){
    console.log("ID DEL PRODUCTO",id)
    fetch(`${PRODUCTS_URL}/items/${id}`)
    .then(apiToJson)
    .then((apiJson)=>
    printProductDetail(apiJson))
}

function printProductDetail(product){
    console.log("products", product)
    let currency ="$";
    currency = product.currency_id === "USD" ? "U$S" : currency;
    const imagesJson = JSON.stringify(product.pictures);
    console.log('imagesJson: ', imagesJson);
    const encodedImagesJson = encodeURIComponent(imagesJson);
    let htmlProduct = 
    `
        <card-product-detail
            name="${product.title}"
            currency="${currency}"
            price="${product.price}"
            images="${encodedImagesJson}"
        ></card-product-detail>
    `;
            
    document.querySelector(".product-detail").innerHTML = htmlProduct
    let customSwiper = ``;
    createSwiper("detail", customSwiper);
}

function createSwiper(insertAt, customSwiper){
    const swiper = new Swiper(`.swiper-${insertAt}`, {
        // Optional parameters
        direction: 'horizontal',
        loop: true,
        // Pagination
        pagination: {
            el: '.swiper-pagination',
        },
        // Navigation arrows
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
        },
        ...customSwiper
    });
    console.log(`SWIPER ${insertAt}`, swiper)
}

export function loadTabCart(){
    // getcartList()
    let htmlcart =
    `<ion-list class="ion-padding-horizontal">
        <cart-item></cart-item>
        <cart-item></cart-item>
        <cart-item></cart-item>
    </ion-list>`
    document.querySelector(".cart-list").innerHTML = htmlcart

}

export function loadTabSearch(){
    // getProductList(3, ".search-content ion-scroll")
    getMostSold()
}
function getMostSold(){
    setTimeout(()=>
    {
        fetch(PRODUCTS_URL + "/sites/MLU/search/?"+STORE_URL)
        .then(apiToJson)
        .then((apiJson)=>{
            const productList = apiJson.results;
            
            productList.sort((a, b) => b.sold_quantity - a.sold_quantity);
            const mostSold = productList.slice(0, 5);
            printMostSold(mostSold, ".search-content")
        })
    }, 1000);
}

function printMostSold(productList, insertAt){
    let currency ="$";
    let html= '';
    for ( let product of productList){
        
        console.log('product.sold_quantity: ', product.sold_quantity);
        currency = product.currency_id === "USD" ? "U$S" : currency;
        html +=
            `   
            <div class="swiper-slide">
                <card-product
                    name="${product.title}"
                    id="${product.id}"
                    currency="${currency}"
                    price="${product.price}"
                    sold="${product.sold_quantity}"
                    image="${product.thumbnail}"
                ></card-product>
            </div>
            `;
        }

    document.querySelector(insertAt).innerHTML = 
        `
            <div class="swiper swiper-search">
            <!-- Additional required wrapper -->
            <div class="swiper-wrapper">
            <!-- Slides -->
            ${html}
            </div>
            </div>
        `

        let customSwiper = {
            slidesPerView: 2.1,
            centeredSlides: false,
            spaceBetween: 8,
            // Pagination
            pagination: {
                clickable: true,
            },
            // // Scrollbar
            // scrollbar: {
            //     el: '.swiper-scrollbar',
            // },
        };
    createSwiper("search", customSwiper);
}

export function loadTabUser(){

}

function printUserInfo(user){
    const $userInfo = document.querySelector(".user-content");
    $userInfo.innerHTML =
    `
    <ion-title>
    <h4>Welcome</h4>
    </ion-title>
    <ion-subtitle>
    <h6>Welcome</h6>
    </ion-subtitle>
    <ion-item>
        <ion-label>
            <strong>Name:</strong>
            ${user.name}
        </ion-label>
    </ion-item>
    <ion-item>
        <ion-label>
            <strong>Username:</strong>
            ${user.username}
        </ion-label>
    </ion-item>
    <ion-item>
        <ion-label>
            <strong>Email:</strong>
            ${user.email}
        </ion-label>
    </ion-item>
    `
    if (user.additionalInfo.address !== undefined && user.additionalInfo.address !== "" ) {
        console.log("hola")
        $userInfo.innerHTML +=
        `
        <ion-item>
        <ion-label>
        <strong>Address:</strong>
        ${user.additionalInfo.address}
        </ion-label>
        </ion-item>
        `
    }
}

// function printcartList(cartList){
//     console.log("products", cartList)
//     let html= "";
//     for(let product of cartList){
//         html += 
//         `<ion-col size="6">
//             <card-product
//                 name="${product.name}"
//                 id="${product.id}"
//                 species="${product.species}"
//                 status="${product.status}"
//                 image="${product.image}"
//             ></card-product>
//         </ion-col>`;
//     }

//     document.querySelector(".product-list").innerHTML = 
//     `<ion-grid>
//         <ion-row>
//             ${html}
//         </ion-row>
//     </ion-grid>`
// }

// NAVEGATION -------------------------------------------------------------------------------
function navTabHome() {
    document.querySelector("ion-nav").setRoot("page-home");
}

// function navTabSearch() {
//     document.querySelector("ion-nav").push("page-search");
// }

// function navTabcart() {
//     document.querySelector("ion-nav").push("page-cart");
// }

// function navTabFav() {
//     document.querySelector("ion-nav").push("page-fav");
// }

export function navPageUserLogin() {
    document.querySelector("ion-nav").setRoot("page-user-login");
}

export function navPageUserSignup() {
    document.querySelector("ion-nav").setRoot("page-user-signup");
}

//------------------------------------------------------------------------

export function submitSignup(e){
    e.preventDefault();
    console.log("prevented");
    
    const signupData = {
        name: document.querySelector("#form-signup #inp-name").value,
        username: document.querySelector("#form-signup #inp-username").value,
        email: document.querySelector("#form-signup #inp-email").value,
        password: document.querySelector("#form-signup #inp-password").value,
        address: document.querySelector("#form-signup #inp-address").value,
    }
    console.log("submit signUp",signupData);

    //invalid data
    if (
        signupData.name === "" ||
        signupData.email === "" ||
        signupData.username === "" ||
        signupData.password === ""
        //VALIDATION PASSWORD
    ) {
        showToastError("All fields are required")
        return;
    }
    
    //valid data
    signUp(signupData);
}

function signUp(user){

    const dataToSend = {
        name: user.name,
        username: user.username,
        email: user.email,
        password: user.password,
        additionalInfo: {
            address: user.address,
        },
    }

    fetch(USERS_URL + "/auth/signup",{
        method: 'POST',
        headers: {
            "Content-type": "application/json"
        }, 
        body: JSON.stringify(dataToSend)
    })
    .then(apiToJson)
    .then((apiJson) => {
        console.log("signup", apiJson);
        if (apiJson.code === 201) {
            navPageUserLogin();
            console.log("Signed up successfully")
            showToastSuccess("Signed up successfully");
        } else {
            switch (apiJson.error) {
            case "DUPLICATED_USERNAME":
                console.log("A user with that username already exists")
                showToastError("A user with that username already exists")
                return;
                case "DUPLICATED_EMAIL":
                console.log("A user with that email already exists")
                showToastError("A user with that email already exists")
                return;
                default:
                    console.log("Signup failed due to an error")
                showToastError("Signup failed due to an error")
                break;
            }
        }
    })
    .catch((error) =>{
        console.log(error);
        showToastError("Signup failed due to an error")
    })
}

export function submitLogin(e){
    e.preventDefault();
    console.log("prevented");
    
    const loginData = {
        email: document.querySelector("#form-login #inp-email").value,
        password: document.querySelector("#form-login #inp-password").value,
    }
    console.log("submit Login", loginData);

    //invalid data
    if (
        loginData.email === "" ||
        loginData.password === ""
    ) {
        showToastError("All fields are required")
        return;
    }
    
    //valid data
    logIn(loginData);
}

function logIn(user){
    fetch(USERS_URL + "/auth/signin",{
        method: 'POST',
        headers: {
            "Content-type": "application/json"
        }, 
        body: JSON.stringify(user)
    })
    .then(apiToJson)
    .then((apiJson) => {
        console.log("login", apiJson);
        if (apiJson.code === 200) {
            saveSession(apiJson.token, apiJson.user);
            navTabHome();
            console.log(`Welcome ${apiJson.user.name}!`);
            showToastSuccess(`Welcome ${apiJson.user.name}!`);
        }  else {
            switch (apiJson.error) {
            case "USER_NOT_FOUND":
                showToastError("User not found");
                console.log('User not found: ');
                return;
                case "INVALID_PASSWORD":
                console.log('wrong password or user ');
                showToastError("Wrong user or password")
                return;
                default:
                showToastError("Login failed due to an error")
                break;
            }
        }
    })
    .catch((error) =>{
        console.log(error);
        showToastError("Login failed due to an error")
    })
}

function saveSession(token, user) {
    status.userLogged = user;
    setLocalStorage("token", token);
}

export function sessionValidation(){
    const tokenUser = getLocalStorage("token")
    
    if(tokenUser === undefined){
        navPageUserLogin();
        showToastError("You must be logged in");
    }
}

export function closeSession(){
    navPageUserLogin();
    localStorage.removeItem("token");
    status.userLogged = undefined;
    showToastError("You must be logged in");
}

export function alertEraseUser(){

    console.log("ALERT")
    const $alert = document.createElement("ion-alert");
    console.log($alert)
    
    $alert.header= "You are about to erase your user";
    $alert.subHeader= "Password is required";

    $alert.inputs = [
        {
            type: "password",
            name: "userPass",
            placeholder: "***",
        },
    ];
    
    $alert.buttons = [
        {
            text: "Delete",
            role: "destructive",
            color: "danger",
            cssClass: "custom-danger-button",
            handler: eraseUser,
        },
        "Cancel",
    ];
    
    document.body.appendChild($alert);
    $alert.present();
}

export function eraseUser(args){
    console.log("user delete", args);

    const dataToSend = {
        password: args.userPass,
    };

    fetch(USERS_URL + "/user", {
        method: "DELETE",
        headers: {
            "Content-type": "application/json",
            "x-access-token": getLocalStorage("token"),
        },
        body: JSON.stringify(dataToSend),
    })
    .then(apiToJson)
    .then((apiJson) => {
        console.log("user delete", apiJson);

        if (apiJson.code === 200) {
            closeSession();
            showToastSuccess("User deleted");
        } else {
            showToastError("Wrong password");
        }
    });
}

export function alertEditUser(){

    console.log("ALERT", status.userLogged)
    const $alert = document.createElement("ion-alert");
    console.log($alert)
    
    $alert.header= "Edit user";
    let addressLogged = "";
    console.log("ADDRESS", status.userLogged.additionalInfo.address)
    if(status.userLogged.additionalInfo.address){
        addressLogged = status.userLogged.additionalInfo.address;
    }
    // $alert.labels= [
    //     {
    //         value: "hola",
    //     },
    //     {
    //         value: "hola",
    //     }
    // ]
    $alert.inputs = [
        {
            type: "text",
            name: "name",
            label:"Address",
            attributes: { label: "hola", "label-placement": "floating"},
            // "label-placement":"floating",
            cssClass: "floating-label",
            placeholder: "status.userLogged.name",
            value: status.userLogged.name
        },
        {
            label:"Address",
            type: "text",
            name: "address",
            placeholder: "address",
            value: addressLogged,
            cssClass: "floating-label",
        },
    ];
    
    $alert.buttons = [
        {
            text: "Edit",
            handler: editUser,
        },
        "Cancel",
    ];
    
    document.body.appendChild($alert);
    $alert.present();
    // $alert.input.setAttribute("label-placement", "floating")
}


export function editUser(args){

    if(args.name === ""){
        showToastError("Name field can not be empty");
        alertEditUser();
    } else {
        const dataToSend = {
            name: args.name,
            additionalInfo: {
                address: args.address,
            }
        };

        fetch(USERS_URL + "/user", {
            method: "PUT",
            headers: {
                "Content-type": "application/json",
                "x-access-token": getLocalStorage("token"),
            },
            body: JSON.stringify(dataToSend),
        })
        .then(apiToJson)
        .then((apiJson) => {
            status.userLogged.additionalInfo.address = apiJson.user.additionalInfo.address

            if (apiJson.code === 200) {
                showToastSuccess("User edited");
                printUserInfo(apiJson.user);
            } else {
                showToastError("Something went wrong");
            }
        });
    }
}

function getUserInfo(){
    fetch(USERS_URL + "/user", {
        headers: {
            "x-access-token": getLocalStorage("token"),
        },
    })
    .then(apiToJson)
    .then((apiJson) => {

        if (apiJson.code === 404) {
            closeSession();
            showToastError("User does not exist");
        } else if (apiJson.code === 200) {
            printUserInfo(apiJson.user);
            status.userLogged = apiJson.user;
        } else {
            switch (apiJson.error) {
                case "TOKEN_EXPIRED":
                showToastError("Session expired, please login again")
                return;
                case "USER_NOT_FOUND":
                showToastError("User not found")
                return;
                default:
                showToastError("Signup failed due to an error")
                break;
            }
        }
    });
}
